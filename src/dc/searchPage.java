/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/*
package dc;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.StringTokenizer;
import javax.naming.Context;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JUHI AGRAWAL
 */
/*
public class searchPage extends javax.swing.JFrame {

    /**
     * Creates new form searchPage
     */
    
/*
    Socket sock;
    DataInputStream stdin;
    String ip,str,criteria,downloadIp;
    secPage parentPage;
    DataOutputStream dout;
    Component c;
    
    //Database details
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://localhost/peertopeer"; // jdbc:mysql://server_address/Database_name
    
    //  Database credentials
    static final String USER = "root";
    static final String PASS = "";
   
    static Connection conn = null;
    static Statement stmt = null;
    
    public searchPage(){
        initComponents();
    }
    
    public searchPage(secPage p,String i) {
        initComponents();
        ip=i;
        parentPage = p;
        c= (Component) this;
        try {
            sock = new Socket(ip, 4444);
            stdin = new DataInputStream(sock.getInputStream());
            dout = new DataOutputStream(sock.getOutputStream());
        } catch (Exception e) {
            System.err.println("Cannot connect to the server, try again later.");
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
/*
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        searchBtn = new javax.swing.JButton();
        filename = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        filedesc = new javax.swing.JTextField();
        fileext = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        downloadTask = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "S.No.", "File name", "User name", "File size", "About", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setColumnSelectionAllowed(true);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);
        Table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("File Name:");

        jLabel2.setText("File Description:");

        jLabel3.setText("File Extension:");

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(downloadTask);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(97, 97, 97)
                .addComponent(jLabel3)
                .addGap(67, 67, 67))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(filename, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 71, Short.MAX_VALUE)
                .addComponent(filedesc, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(fileext, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(searchBtn)
                        .addGap(126, 126, 126)
                        .addComponent(backButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filedesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBtn)
                    .addComponent(backButton))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel t=(DefaultTableModel)Table.getModel();
        t.setRowCount(0);
        Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Table.setRowSelectionAllowed(true);
        //Table.setColumnSelectionAllowed(false);
        
        System.out.println("Connected");
           
        try {
            
            
            String n=filename.getText();
            String d=filedesc.getText();
            String e=fileext.getText();
            criteria="#%#SELECT * FROM `filelist`";
            if(!n.equals("") || !d.equals("") || !e.equals(""))
            criteria+=" WHERE";

            if(!n.equals(""))
                criteria+=" LOWER(`filename`) LIKE LOWER('%"+n+"%')";
            if(!n.equals("") && (!d.equals("") || !e.equals("")))
                criteria+=" OR";
            if(!d.equals(""))
                criteria+=" LOWER(`about`) LIKE LOWER('%"+d+"%')";
            if(!d.equals("") && !e.equals(""))
                criteria+=" OR";
            if(!e.equals(""))
                criteria+=" LOWER(`format`) LIKE LOWER('%"+e+"%')";
            System.out.println(criteria);
            dout.writeUTF(criteria);
            dout.flush(); 
            
            int count=1;
            //str=(String)stdin.readUTF();
            String a;
            while(!((str=(String)stdin.readUTF()).equals("END"))){
                t.addRow(new String[]{});
                System.out.println(str);
                
                StringTokenizer st = new StringTokenizer(str,"#%#");
                System.out.println(st.countTokens());
                Table.getModel().setValueAt(String.valueOf(count), count-1, 0);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("1")))
                Table.getModel().setValueAt(a.substring(1), count-1, 1);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("2")))
                Table.getModel().setValueAt(a.substring(1), count-1, 2);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("3")))
                Table.getModel().setValueAt(a.substring(1), count-1, 3);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("4")))
                Table.getModel().setValueAt(a.substring(1), count-1, 4);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("5")))
                Table.getModel().setValueAt(a.substring(1), count-1, 5);
                if(st.hasMoreTokens()){
                    
                    String b=st.nextToken();
                    downloadIp=(b).substring(1,b.lastIndexOf(':'));
                }
                count++;
                
            
        }
            
           // JOptionPane.showMessageDialog((Component) context,"File Successfully Uploaded!!");
        } catch (IOException ex) {
          //  Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } 
        Table.addMouseListener(new MouseAdapter(){
           
           public void mouseClicked(MouseEvent me)
           {
               if(me.getClickCount()==2)
               {
                   JTable target = (JTable)me.getSource();
                   int row = target.getSelectedRow();
                   System.out.println("test   "+Table.getValueAt(row,0).toString());
                   System.out.println("test   "+Table.getValueAt(row,1).toString());
                   System.out.println("test   "+Table.getValueAt(row,2).toString());
                   System.out.println("test   "+Table.getValueAt(row,3).toString());
                   System.out.println("test   "+Table.getValueAt(row,4).toString());
                   System.out.println("test   "+Table.getValueAt(row,5).toString());
                   
                   
                   try{
                   System.out.println("1Connecting to database...");
                    conn = DriverManager.getConnection(DB_URL,USER,PASS);
                    stmt = conn.createStatement();
                    System.out.println("db");
                    String sql;
                 
                    Class.forName("com.mysql.jdbc.Driver");
                        
                    sql="SELECT * FROM `activeUser` WHERE `ip` LIKE '%"+downloadIp+"%'";
                    System.out.println(sql);
                       ResultSet rs;
        
                    rs = stmt.executeQuery(sql);
    
                    //Sending the requested details back to the client
                    if(!rs.isBeforeFirst())
                        JOptionPane.showMessageDialog((Component) c, "User not online");
                    else{
                         //New thread to start the download
                        Thread t = new Thread(new downloadClient(downloadIp,Table.getValueAt(row,5).toString(),Long.valueOf(Table.getValueAt(row,3).toString())));
                        t.start();
                   
                        downloadTask.setText("Downloading "+Table.getValueAt(row, 5).toString());
                        JOptionPane.showMessageDialog((Component) c,"Download started");
                    }
                    
  
                    rs.close();
                    stmt.close();
                    conn.close();
                   
                   }catch(Exception e){}
                   
                   
                   
                   
                   
                  
                   
                   
               }
               
               
           }
           
       });
      
      
     // ListSelectionModel model = Table.getSelectionModel()
    }//GEN-LAST:event_searchBtnActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        parentPage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
/*
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
/*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(searchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(searchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(searchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(searchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
/*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new searchPage().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton backButton;
    private javax.swing.JEditorPane downloadTask;
    private javax.swing.JTextField filedesc;
    private javax.swing.JTextField fileext;
    private javax.swing.JTextField filename;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables
}

*/
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dc;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.StringTokenizer;
import javax.naming.Context;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JUHI AGRAWAL
 */
public class searchPage extends javax.swing.JFrame {

    /**
     * Creates new form searchPage
     */
    
    Socket sock;
    DataInputStream stdin;
    String ip,str,criteria,downloadIp;
    secPage parentPage;
    DataOutputStream dout;
    Component c;
    
    //Database details
    static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";
    static final String DB_URL = "jdbc:mysql://localhost/peertopeer"; // jdbc:mysql://server_address/Database_name
    
    //  Database credentials
    static final String USER = "root";
    static final String PASS = "";
   
    static Connection conn = null;
    static Statement stmt = null;
    
    public searchPage(){
        initComponents();
    }
    
    public searchPage(secPage p,String i) {
        initComponents();
        ip=i;
        parentPage = p;
        c= (Component) this;
        try {
            sock = new Socket(ip, 4444);
            stdin = new DataInputStream(sock.getInputStream());
            dout = new DataOutputStream(sock.getOutputStream());
        } catch (Exception e) {
            System.err.println("Cannot connect to the server, try again later.");
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        searchBtn = new javax.swing.JButton();
        filename = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        filedesc = new javax.swing.JTextField();
        fileext = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(580, 350));
        getContentPane().setLayout(null);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "S.No.", "File name", "User name", "File size", "About", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setColumnSelectionAllowed(true);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);
        Table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 159, 535, 113);

        searchBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        getContentPane().add(searchBtn);
        searchBtn.setBounds(153, 109, 100, 25);
        getContentPane().add(filename);
        filename.setBounds(25, 59, 123, 20);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("File Name:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 30, 90, 14);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("File Description:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(220, 30, 100, 14);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("File Extension:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(398, 33, 90, 20);
        getContentPane().add(filedesc);
        filedesc.setBounds(219, 59, 123, 20);
        getContentPane().add(fileext);
        fileext.setBounds(398, 59, 123, 20);

        backButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton);
        backButton.setBounds(344, 109, 80, 25);

        jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\priyanka\\Desktop\\final final dc\\raat ka final dc muskan\\dn2.jpg")); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(0, 0, 570, 360);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel t=(DefaultTableModel)Table.getModel();
        t.setRowCount(0);
        Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Table.setRowSelectionAllowed(true);
        //Table.setColumnSelectionAllowed(false);
        
        System.out.println("Connected");
           
        try {
            
            
            String n=filename.getText();
            String d=filedesc.getText();
            String e=fileext.getText();
            criteria="#%#SELECT * FROM `filelist`";
            if(!n.equals("") || !d.equals("") || !e.equals(""))
            criteria+=" WHERE";

            if(!n.equals(""))
                criteria+=" LOWER(`filename`) LIKE LOWER('%"+n+"%')";
            if(!n.equals("") && (!d.equals("") || !e.equals("")))
                criteria+=" AND";
            if(!d.equals(""))
                criteria+=" LOWER(`about`) LIKE LOWER('%"+d+"%')";
            if(!d.equals("") && !e.equals(""))
                criteria+=" AND";
            if(!e.equals(""))
                criteria+=" LOWER(`format`) LIKE LOWER('%"+e+"%')";
            System.out.println(criteria);
            dout.writeUTF(criteria);
            dout.flush(); 
            
            int count=1;
            //str=(String)stdin.readUTF();
            String a;
            while(!((str=(String)stdin.readUTF()).equals("END"))){
                t.addRow(new String[]{});
                System.out.println(str);
                
                StringTokenizer st = new StringTokenizer(str,"#%#");
                System.out.println(st.countTokens());
                Table.getModel().setValueAt(String.valueOf(count), count-1, 0);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("1")))
                Table.getModel().setValueAt(a.substring(1), count-1, 1);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("2")))
                Table.getModel().setValueAt(a.substring(1), count-1, 2);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("3")))
                Table.getModel().setValueAt(a.substring(1), count-1, 3);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("4")))
                Table.getModel().setValueAt(a.substring(1), count-1, 4);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("5")))
                Table.getModel().setValueAt(a.substring(1), count-1, 5);
                if(st.hasMoreTokens()){
                    
                    String b=st.nextToken();
                    downloadIp=(b).substring(1,b.lastIndexOf(':'));
                }
                count++;
                
            
        }
            
           // JOptionPane.showMessageDialog((Component) context,"File Successfully Uploaded!!");
        } catch (IOException ex) {
          //  Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } 
        Table.addMouseListener(new MouseAdapter(){
           
           public void mouseClicked(MouseEvent me)
           {
               if(me.getClickCount()==2)
               {
                   JTable target = (JTable)me.getSource();
                   int row = target.getSelectedRow();
                   System.out.println("test   "+Table.getValueAt(row,0).toString());
                   System.out.println("test   "+Table.getValueAt(row,1).toString());
                   System.out.println("test   "+Table.getValueAt(row,2).toString());
                   System.out.println("test   "+Table.getValueAt(row,3).toString());
                   System.out.println("test   "+Table.getValueAt(row,4).toString());
                   System.out.println("test   "+Table.getValueAt(row,5).toString());
                   
                   
                   try{
                   System.out.println("1Connecting to database...");
                    conn = DriverManager.getConnection(DB_URL,USER,PASS);
                    stmt = conn.createStatement();
                    System.out.println("db");
                    String sql;
                 
                    Class.forName("com.mysql.jdbc.Driver");
                        
                    sql="SELECT * FROM `activeUser` WHERE `ip` LIKE '%"+downloadIp+"%'";
                    System.out.println(sql);
                       ResultSet rs;
        
                    rs = stmt.executeQuery(sql);
    
                    //Sending the requested details back to the client
                    //if(!rs.isBeforeFirst())
                       // JOptionPane.showMessageDialog((Component) c, "User not online");
                    //else
                    {
                         //New thread to start the download
                        Thread t = new Thread(new downloadClient(downloadIp,Table.getValueAt(row,5).toString(),Long.valueOf(Table.getValueAt(row,3).toString())));
                        t.start();
                   
//                        downloadTask.setText("Downloading "+Table.getValueAt(row, 5).toString());
                        JOptionPane.showMessageDialog((Component) c,"Download started");
                    }
                    
  
                    rs.close();
                    stmt.close();
                    conn.close();
                   
                   }catch(Exception e){}
                
               }
               
               
           }
           
       });
      
      
     // ListSelectionModel model = Table.getSelectionModel()
    }//GEN-LAST:event_searchBtnActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TableMouseClicked

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        parentPage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(searchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(searchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(searchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(searchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new searchPage().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField filedesc;
    private javax.swing.JTextField fileext;
    private javax.swing.JTextField filename;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables
}
