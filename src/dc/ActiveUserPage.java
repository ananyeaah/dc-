
/*
package dc;


import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.StringTokenizer;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JUHI AGRAWAL
 */
/*
public class ActiveUserPage extends javax.swing.JFrame {

    /**
     * Creates new form ActiveUserPage
     */
/*
    static Socket sock;
    static DataInputStream stdin;
    static DataOutputStream dout;
    static secPage parentPage;
    static String ip,criteria,str,downloadIp;
 
    public ActiveUserPage() {
        initComponents();
    }
 
    public ActiveUserPage(secPage c,String i) {
        initComponents();
        ip=i;
        parentPage=c;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
/*
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        show = new javax.swing.JButton();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Active Users"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userList);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "S.No.", "File Name", "Username", "File Size", "About", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Table);

        show.setText("Show");
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(32, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(show)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(back)
                        .addGap(126, 126, 126))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(show)
                    .addComponent(back))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
        DefaultTableModel t=(DefaultTableModel)userList.getModel();
        t.setRowCount(0);
        DefaultTableModel t1=(DefaultTableModel)Table.getModel();
        t1.setRowCount(0);
        userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
 
        try {
            sock = new Socket(ip, 4444);
            stdin = new DataInputStream(sock.getInputStream());
            dout = new DataOutputStream(sock.getOutputStream());
            System.out.println("enter");
        } catch (Exception e) {
            System.err.println("Cannot connect to the server, try again later.");
            System.exit(1);
        }
        System.out.println("Connected");
        try {
 
 
            criteria="#!#SELECT * FROM `activeUser`";
            System.out.println(criteria);
            dout.writeUTF(criteria);
            //dout.flush(); 
 
            int count=1;
            //str=(String)stdin.readUTF();
            while(!((str=(String)stdin.readUTF()).equals("END"))){
                t.addRow(new String[]{});
                System.out.println("iji"+str);
                userList.getModel().setValueAt(str,count-1, 0);
                count++;
 
        }
 
 
           // JOptionPane.showMessageDialog((Component) context,"File Successfully Uploaded!!");
        } catch (IOException ex) {
          //  Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        userList.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent me){
                System.out.println(me.getClickCount());
               if(me.getClickCount()==1)
               {
                   System.out.println("mouse clicked two times ");
                   t1.setRowCount(0);
                   JTable target = (JTable)me.getSource();
                   int row = target.getSelectedRow();
 
                   String user = (String) userList.getValueAt(row, 0);
                   System.out.println("yeh vaala " + user);
                   criteria="#%#SELECT * FROM `filelist` WHERE `username` LIKE '"+user+"'";
                   //criteria="#%#SELECT * FROM `filelist`";
                   try{
                   System.out.println("query going on ");
                   dout.writeUTF(criteria);
                   dout.flush(); 
                   System.out.println("query done on ");
 
            int count=1;
            //str=(String)stdin.readUTF();
            String a;
            System.out.println("fdsdfdsf");
            //str =  (String)stdin.readUTF();
 
            while(!((str=(String)stdin.readUTF()).equals("END"))){
 
                t1.addRow(new String[]{});
                System.out.println(str);
 
                StringTokenizer st = new StringTokenizer(str,"#%#");
                System.out.println(st.countTokens());
                Table.getModel().setValueAt(String.valueOf(count), count-1, 0);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("1")))
                Table.getModel().setValueAt(a.substring(1), count-1, 1);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("2")))
                Table.getModel().setValueAt(a.substring(1), count-1, 2);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("3")))
                Table.getModel().setValueAt(a.substring(1), count-1, 3);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("4")))
                Table.getModel().setValueAt(a.substring(1), count-1, 4);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("5")))
                Table.getModel().setValueAt(a.substring(1), count-1, 5);
                if(st.hasMoreTokens()){
 
                    String b=st.nextToken();
                    downloadIp=(b).substring(1,b.lastIndexOf(':'));
                }
                count++;
 
 
        }
            System.out.println("kuch to gadbad h :P");
 
           // JOptionPane.showMessageDialog((Component) context,"File Successfully Uploaded!!");
        } catch (IOException ex) {
          //  Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } 
       
                   
        Table.addMouseListener(new MouseAdapter(){
 
 
           @Override
           public void mouseClicked(MouseEvent me)
           {
                System.out.println("checking ");
                 System.out.println(me.getClickCount());
               if(me.getClickCount()==2)
               {
                   System.out.println("ab kyun nahi aaya");
                   JTable target = (JTable)me.getSource();
                   int row = target.getSelectedRow();
                   System.out.println("test   "+Table.getValueAt(row,0).toString());
                   System.out.println("test   "+Table.getValueAt(row,1).toString());
                   System.out.println("test   "+Table.getValueAt(row,2).toString());
                   System.out.println("test   "+Table.getValueAt(row,3).toString());
                   System.out.println("test   "+Table.getValueAt(row,4).toString());
                   System.out.println("test   "+Table.getValueAt(row,5).toString());
 
                   //New thread to start the download
                   Thread t = new Thread(new downloadClient(downloadIp,Table.getValueAt(row,5).toString(),Long.valueOf(Table.getValueAt(row,3).toString())));
                   t.start();
 
               }
 
 
           }
 
       });
 
               }
 
 
           }
 
            } 
        );
    }//GEN-LAST:event_showActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        parentPage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
/*
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
/*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ActiveUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ActiveUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ActiveUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActiveUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ActiveUserPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton back;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton show;
    private javax.swing.JTable userList;
    // End of variables declaration//GEN-END:variables
}



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dc;


import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.StringTokenizer;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JUHI AGRAWAL
 */
public class ActiveUserPage extends javax.swing.JFrame {

    /**
     * Creates new form ActiveUserPage
     */
    static Socket sock;
    static DataInputStream stdin;
    static DataOutputStream dout;
    static secPage parentPage;
    static String ip,criteria,str,downloadIp;
 
    public ActiveUserPage() {
        initComponents();
    }
 
    public ActiveUserPage(secPage c,String i) {
        initComponents();
        ip=i;
        parentPage=c;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        show = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 400));
        getContentPane().setLayout(null);

        userList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Active Users"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userList);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 0, 99, 117);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "S.No.", "File Name", "Username", "File Size", "About", "Location"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Table);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(105, 0, 375, 275);

        show.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        show.setText("Show");
        show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showActionPerformed(evt);
            }
        });
        getContentPane().add(show);
        show.setBounds(105, 281, 83, 31);

        back.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(331, 281, 76, 31);

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\priyanka\\Desktop\\final final dc\\raat ka final dc muskan\\dn2.jpg")); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 550, 360);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        // TODO add your handling code here:
        DefaultTableModel t=(DefaultTableModel)userList.getModel();
        t.setRowCount(0);
        final DefaultTableModel t1=(DefaultTableModel)Table.getModel();
        t1.setRowCount(0);
        userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
 
        try {
            sock = new Socket(ip, 4444);
            stdin = new DataInputStream(sock.getInputStream());
            dout = new DataOutputStream(sock.getOutputStream());
            System.out.println("enter");
        } catch (Exception e) {
            System.err.println("Cannot connect to the server, try again later.");
            System.exit(1);
        }
        System.out.println("Connected");
        try {
 
 
            criteria="#!#SELECT * FROM `activeUser`";
            System.out.println(criteria);
            dout.writeUTF(criteria);
            //dout.flush(); 
 
            int count=1;
            //str=(String)stdin.readUTF();
            while(!((str=(String)stdin.readUTF()).equals("END"))){
                t.addRow(new String[]{});
                System.out.println("iji"+str);
                userList.getModel().setValueAt(str,count-1, 0);
                count++;
 
        }
 
 
           // JOptionPane.showMessageDialog((Component) context,"File Successfully Uploaded!!");
        } catch (IOException ex) {
          //  Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        userList.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent me){
                System.out.println(me.getClickCount());
               if(me.getClickCount()==1)
               {
                   System.out.println("mouse clicked two times ");
                   t1.setRowCount(0);
                   JTable target = (JTable)me.getSource();
                   int row = target.getSelectedRow();
 
                   String user = (String) userList.getValueAt(row, 0);
                   System.out.println("yeh vaala " + user);
                   criteria="#%#SELECT * FROM `filelist` WHERE `username` LIKE '"+user+"'";
                   //criteria="#%#SELECT * FROM `filelist`";
                   try{
                   System.out.println("query going on ");
                   dout.writeUTF(criteria);
                   dout.flush(); 
                   System.out.println("query done on ");
 
            int count=1;
            //str=(String)stdin.readUTF();
            String a;
            System.out.println("fdsdfdsf");
            //str =  (String)stdin.readUTF();
 
            while(!((str=(String)stdin.readUTF()).equals("END"))){
 
                t1.addRow(new String[]{});
                System.out.println(str);
 
                StringTokenizer st = new StringTokenizer(str,"#%#");
                System.out.println(st.countTokens());
                Table.getModel().setValueAt(String.valueOf(count), count-1, 0);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("1")))
                Table.getModel().setValueAt(a.substring(1), count-1, 1);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("2")))
                Table.getModel().setValueAt(a.substring(1), count-1, 2);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("3")))
                Table.getModel().setValueAt(a.substring(1), count-1, 3);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("4")))
                Table.getModel().setValueAt(a.substring(1), count-1, 4);
                if(st.hasMoreTokens() && !((a=st.nextToken()).equals("5")))
                Table.getModel().setValueAt(a.substring(1), count-1, 5);
                if(st.hasMoreTokens()){
 
                    String b=st.nextToken();
                    downloadIp=(b).substring(1,b.lastIndexOf(':'));
                }
                count++;
 
 
        }
            System.out.println("kuch to gadbad h :P");
 
           // JOptionPane.showMessageDialog((Component) context,"File Successfully Uploaded!!");
        } catch (IOException ex) {
          //  Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } 
        Table.addMouseListener(new MouseAdapter(){
 
 
           @Override
           public void mouseClicked(MouseEvent me)
           {
                System.out.println("checking ");
                 System.out.println(me.getClickCount());
               if(me.getClickCount()==2)
               {
                   System.out.println("ab kyun nahi aaya");
                   JTable target = (JTable)me.getSource();
                   int row = target.getSelectedRow();
                   System.out.println("test   "+Table.getValueAt(row,0).toString());
                   System.out.println("test   "+Table.getValueAt(row,1).toString());
                   System.out.println("test   "+Table.getValueAt(row,2).toString());
                   System.out.println("test   "+Table.getValueAt(row,3).toString());
                   System.out.println("test   "+Table.getValueAt(row,4).toString());
                   System.out.println("test   "+Table.getValueAt(row,5).toString());
 
                   //New thread to start the download
                   Thread t = new Thread(new downloadClient(downloadIp,Table.getValueAt(row,5).toString(),Long.valueOf(Table.getValueAt(row,3).toString())));
                   t.start();
 
               }
 
 
           }
 
       });
 
               }
 
 
           }
 
            } 
        );
    }//GEN-LAST:event_showActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        parentPage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ActiveUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ActiveUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ActiveUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ActiveUserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ActiveUserPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Table;
    private javax.swing.JButton back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton show;
    private javax.swing.JTable userList;
    // End of variables declaration//GEN-END:variables
}

