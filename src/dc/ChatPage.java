/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dc;


import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author priyanka
 */
public class ChatPage extends javax.swing.JFrame {

    /**
     * Creates new form ChatPage
     */
   static Socket sock,chatsock;
   static ServerSocket ss;
    static DataInputStream stdin;
    static DataOutputStream dout;
    static ActiveUserPage parentPage;
    static String ip,criteria,str,downloadIp;
    
    public ChatPage() {
        initComponents();
       
       
    }
    public ChatPage(ActiveUserPage c,String i) {
        initComponents();
        ip=i;
        parentPage=c;
        try {
           ss = new ServerSocket(4900);
       } catch (IOException ex) {
           Logger.getLogger(ChatPage.class.getName()).log(Level.SEVERE, null, ex);
       }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JTable();
        Message = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        MessageBox = new javax.swing.JTextArea();
        Send = new javax.swing.JButton();
        Show = new javax.swing.JButton();
        Back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "User", "ip"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userList);

        MessageBox.setColumns(20);
        MessageBox.setRows(5);
        jScrollPane2.setViewportView(MessageBox);

        Send.setText("Send");

        Show.setText("Show");
        Show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowActionPerformed(evt);
            }
        });

        Back.setText("Back");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Message, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Send))
                    .addComponent(jScrollPane2))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(Show)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Back)
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Message, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Send)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Show)
                    .addComponent(Back))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowActionPerformed
        // TODO add your handling code here:
         DefaultTableModel t=(DefaultTableModel)userList.getModel();
        t.setRowCount(0);
        
        userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
 
        try {
            sock = new Socket(ip, 4444);
            stdin = new DataInputStream(sock.getInputStream());
            dout = new DataOutputStream(sock.getOutputStream());
            System.out.println("enter");
        } catch (Exception e) {
            System.err.println("Cannot connect to the server, try again later.");
            System.exit(1);
        }
        System.out.println("Connected");
        try {
 
 
            criteria="#!#SELECT * FROM `activeUser`";
            System.out.println(criteria);
            dout.writeUTF(criteria);
            //dout.flush(); 
 
            int count=1;
            //str=(String)stdin.readUTF();
            while(!((str=(String)stdin.readUTF()).equals("END"))){
                t.addRow(new String[]{});
                System.out.println("iji"+str);
                
                StringTokenizer st = new StringTokenizer(str,"#?#");
                System.out.println(st.countTokens());
                userList.getModel().setValueAt(st.nextToken(), count-1,0);


                if(st.hasMoreTokens())
                userList.getModel().setValueAt(st.nextToken().substring(1), count-1, 1);
                
                
                
                
                count++;
 
        }
 
 
           // JOptionPane.showMessageDialog((Component) context,"File Successfully Uploaded!!");
        } catch (IOException ex) {
          //  Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
         userList.addMouseListener(new MouseAdapter(){
            @Override
            public void mouseClicked(MouseEvent me){
                System.out.println(me.getClickCount());
               if(me.getClickCount()==2)
               {
                   JTable target = (JTable)me.getSource();
                   int row = target.getSelectedRow();
                   
                   String ipnow;
                   ipnow = userList.getValueAt(row,1).toString();
                   
                    try {
                        chatsock = new Socket(ipnow,4900);
                      
                    } catch (IOException ex) {
                        Logger.getLogger(ChatPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                   
                   
               
               }
            }
         }
         );
       try {
           sock = ss.accept();
           
           
           
           
       } catch (IOException ex) {
           Logger.getLogger(ChatPage.class.getName()).log(Level.SEVERE, null, ex);
       }
        
        
    }//GEN-LAST:event_ShowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JTextField Message;
    public javax.swing.JTextArea MessageBox;
    private javax.swing.JButton Send;
    private javax.swing.JButton Show;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable userList;
    // End of variables declaration//GEN-END:variables
}


 class ReadThread extends Thread{
     
     String ip;
     Socket sock;
     DataInputStream din;
     DataOutputStream dout;
     String str;
     ReadThread(String i)
     {
         ip = i;
     }
     public void run(){
         
         try {
             sock = new Socket(ip,4900);
             din  =  new DataInputStream(sock.getInputStream());
             dout = new DataOutputStream(sock.getOutputStream());
             while(true)
             {
                 if(din.available()>0){
                     str = din.readUTF();
                     MessageBox.setText(str);
                             
                     
                 }
             }
             
         } catch (IOException ex) {
             Logger.getLogger(ReadThread.class.getName()).log(Level.SEVERE, null, ex);
         }
         
         
     }
     
     
     
     
    
    
    
}
 class WriteThread extends Thread{
    
    
    
}
